function makeRequest(eventID, bookmaker, sectionContent) {
    var sport = document.getElementById("sportSelect").value;
    if (document.getElementById("sportSelect").value == "basketball_nba" || "basketball_wnba") {
      //https://the-odds-api.com/sports-odds-data/betting-markets.html
      //player_points_alternate
      //var markets = 'player_points_alternate'
      var markets =
        "player_points,player_rebounds,player_assists,player_points_rebounds_assists,player_points_rebounds,player_points_assists,player_rebounds_assists";
    }
    if (document.getElementById("sportSelect").value == "baseball_mlb") {
      var markets =
        "batter_hits_runs_rbis,batter_runs_scored,batter_strikeouts,batter_total_bases,batter_walks";
    }
    if (document.getElementById("sportSelect").value == "icehockey_nhl") {
      var markets = "player_points,player_assists,player_shots_on_goal";
    }
    fetch(
      "https://api.the-odds-api.com/v4/sports/" +
        sport +
        "/events/" +
        eventID +
        "/odds?apiKey=" +
        apiKey +
        "&bookmakers=" +
        bookmaker +
        "&markets=" +
        markets +
        "&oddsFormat=decimal"
    )
      .then((response) => response.json())
      .then((data) => {
        var formattedHtml = "";
        formattedHtml += "<div>";
        formattedHtml += "<h3>API Response:</h3>";
        formattedHtml += "<p><strong>Event ID:</strong> " + data.id + "</p>";
        formattedHtml += "<p><strong>Sport:</strong> " + data.sport_title + "</p>";
        formattedHtml +=
          "<p><strong>Commence Time:</strong> " + data.commence_time + "</p>";
        formattedHtml += "</div>";
        data.bookmakers.forEach((bookmaker) => {
          formattedHtml += "<div class='fullscreen'>";
          bookmaker.markets.forEach((market) => {
            var formattedMarketName = market.key
              .split("_")
              .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
              .join(" ");
            //formattedMarketName = formattedMarketName.replace("Player", "");
            formattedHtml += "<div class='markets'>";
            formattedHtml += "<h2>" + formattedMarketName + "</h2>";
            sortedOutcomes = market.outcomes.sort((a, b) => a.price - b.price);
            console.log("Current Market Loading", market.key);
            sortedOutcomes.forEach((outcome) => {
              playerName = outcome.description;
              currentLine = outcome.price;
              //console.log(Number((100 / currentLine).toFixed(2)))
              //console.log("OG",playerName)
              for (var i = 0; i < sortedOutcomes.length; i++) {
                var item = sortedOutcomes[i];
                //console.log(item.description)
                if (item.description == playerName && item.price != currentLine) {
                  oppositeEV = Number((100 / item.price).toFixed(2));
                  //console.log("Found match",item.description, oppositeEV)
                  console.log("Loaded Match");
                  break;
                }
              }
              var noVIG = Number(
                (
                  (Number((100 / outcome.price).toFixed(2)) /
                    (oppositeEV + Number((100 / outcome.price).toFixed(2)))) *
                  100
                ).toFixed(2)
              );
              var inforeq = findPlayerId(outcome.description)
              var idnumbr = inforeq.id;
              console.log(idnumbr)
              var onPrizePicksCheck = findstats(idnumbr, market.key);
              var filterBY = document.getElementById("quantity").value;
              //console.log(filterBY)
              if (noVIG > filterBY) {
                //console.log("TXT " + Math.round(100 / outcome.price))
                if (onPrizePicksCheck == outcome.point) {
                  var onPP = "On PrizePicks";
                  //formattedHtml += "<p><strong>" + outcome.description + "</strong> " + outcome.name + " " + outcome.point + " - "  + (" " + Number((100 / outcome.price).toFixed(2)) + "%") + " " +"</p>" + "<p style='color: #9b59b6;'>" + onPP + " at " + onPrizePicksCheck + "</p>";
                  //formattedHtml += "<p><strong>" + outcome.description + "</strong> " + outcome.name + " " + outcome.point + " - "  + (" " + noVIG + "%") + " " +"</p>" + "<p style='color: green;'>" + onPP + " at " + onPrizePicksCheck + "</p>";
                  formattedHtml += '<img src="'+ inforeq.url +'"alt="error" width="100" height="100">' + 
                    "<p style='color: green;'><strong>" +
                    outcome.description +
                    "</strong> " +
                    outcome.name +
                    " " +
                    outcome.point +
                    " - " +
                    (" " + noVIG + "%") +
                    " " +
                    "</p>";
                } else if (onPrizePicksCheck > 0) {
                  var onPP = "On PrizePicks";
                  //formattedHtml += "<p><strong>" + outcome.description + "</strong> " + outcome.name + " " + outcome.point + " - "  + (" " + Number((100 / outcome.price).toFixed(2)) + "%") + " " +"</p>" + "<p style='color: #9b59b6;'>" + onPP + " at " + onPrizePicksCheck + "</p>";
                  //formattedHtml += "<p><strong>" + outcome.description + "</strong> " + outcome.name + " " + outcome.point + " - "  + (" " + noVIG + "%") + " " +"</p>" + "<p style='color: #9b59b6;'>" + onPP + " at " + onPrizePicksCheck + "</p>";
                  formattedHtml += '<img src="'+ inforeq.url +'"alt="error" width="100" height="100">' + 
                    "<p style='color: orange;'><strong>" +
                    outcome.description +
                    "</strong> " +
                    outcome.name +
                    " " +
                    outcome.point +
                    " - " +
                    (" " + noVIG + "%") +
                    " " +
                    "</p>";
                } else {
                  var onPP = " ";
                  formattedHtml +=
                  '<img src="'+ inforeq.url +'"alt="error" width="100" height="100">' + 
                    "<p><strong>" +
                    outcome.description +
                    "</strong> " +
                    outcome.name +
                    " " +
                    outcome.point +
                    " - " +
                    (" " + noVIG + "%") +
                    "</p>";
                }
              }
            });
            formattedHtml += "</div>";
          });
          formattedHtml += "</div>";
        });
        var enteredthing = document.getElementById("fullscreen");
        enteredthing.innerHTML = formattedHtml;
        // Select all div elements with the class "markets"
        var divElements = document.getElementsByClassName('markets');
  
        // Loop through each div in reverse order
        for (var i = divElements.length - 1; i >= 0; i--) {
            var divElement = divElements[i];
  
            // Get all the <p> tags inside the current div
            var paragraphs = divElement.getElementsByTagName('p');
  
            // Check if there are no <p> tags
            if (paragraphs.length === 0) {
                // If no <p> tags, delete the div
                divElement.parentNode.removeChild(divElement);
            }
        }
      })
      .catch((error) => {
        console.error("Error fetching odds data:", error);
        sectionContent.innerHTML = "<p>Error fetching odds data</p>";
      });
  }









  function findPlayerId(name) {
    try {
        if (sportvalue == "NBA") {
          jsonData = NBAjsonData;
        }
        if (sportvalue == "MLB") {
          jsonData = MLBjsonData
        }
        var data = JSON.parse(jsonData);
        var playerName = name;
        var playerId = null;
        var imageurl = null;
        var returnmsg = null;
        for (var i = 0; i < data.included.length; i++) {
            var item = data.included[i];
            if (
                item.type === "new_player" &&
                item.attributes.display_name === playerName
            ) {
                playerId = item.id;
                imageurl = item.attributes.image_url
                returnmsg = {id: playerId,
                             url: imageurl}
                break;
            }
        }
        if (playerId !== null) {
            return returnmsg;
        } else {
            return "Game Started / Error";
        }
    } catch (error) {
        // Handle JSON parsing errors
    }
  }
  
  function findstats(id, market) {
    try {
        var data = JSON.parse(jsonData);
        var playerid = id;
        var category = getCategoryName(market);
        var prop = null;
        for (var i = 0; i < data.data.length; i++) {
            var item = data.data[i];
            if (
                item.relationships.new_player.data.id === playerid &&
                item.attributes.stat_type === category &&
                item.attributes.odds_type !== "demon" &&
                item.attributes.odds_type !== "goblin"
            ) {
                prop = item.attributes.line_score;
                break;
            }
        }
        if (prop !== null) {
            return prop;
        } else {
            return "Game Started / Error";
        }
    } catch (error) {
        // Handle JSON parsing errors
    }
  }
  
  function getCategoryName(market) {
    var categoryMap = {
        "player_assists": "Assists",
        "player_points": "Points",
        "player_points_assists": "Pts+Asts",
        "player_points_rebounds": "Pts+Rebs",
        "player_points_rebounds_assists": "Pts+Rebs+Asts",
        "player_rebounds_assists": "Rebs+Asts",
        "player_rebounds": "Rebounds",
        "batter_hits_runs_rbis": "Hits+Runs+RBIS",
        "batter_runs_scored": "Runs",
        "batter_total_bases": "Total Bases",
        "batter_walks": "Walks",
        "batter_strikeouts": "Hitter Strikeouts"
    };
    return categoryMap[market] || "";
  }
  